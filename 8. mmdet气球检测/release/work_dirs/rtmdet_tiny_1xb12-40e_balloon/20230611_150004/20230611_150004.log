2023/06/11 15:00:06 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 1724255953
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
    NVCC: Cuda compilation tools, release 12.1, V12.1.105
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.36.32532 版
    GCC: n/a
    PyTorch: 2.0.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2
    OpenCV: 4.7.0
    MMEngine: 0.7.1

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/11 15:00:07 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=10, max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=100,
    val_interval=10,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0, end=30),
    dict(
        type='CosineAnnealingLR',
        eta_min=9.375000000000001e-06,
        begin=50,
        end=100,
        T_max=50,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.0001875, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = './balloon/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=12,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='./balloon/',
        ann_file='train/balloon_train.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])),
    pin_memory=False)
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./balloon/',
        ann_file='val/balloon_val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./balloon/',
        ann_file='val/balloon_val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='./balloon/val/balloon_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='./balloon/val/balloon_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }], [{
                        'type': 'LoadAnnotations',
                        'with_bbox': True
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        ),
        frozen_stages=4),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 100
stage2_num_epochs = 20
base_lr = 0.0001875
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=95,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
num_classes = 1
train_batch_size_per_gpu = 12
train_num_workers = 4
val_batch_size_per_gpu = 1
val_num_workers = 2
num_epochs_stage2 = 5
launcher = 'none'
work_dir = './work_dirs\\rtmdet_tiny_1xb12-40e_balloon'

2023/06/11 15:00:09 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/11 15:00:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/11 15:00:10 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/11 15:00:11 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/11 15:00:11 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/11 15:00:11 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/11 15:00:11 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/11 15:00:11 - mmengine - INFO - Checkpoints will be saved to c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon.
2023/06/11 15:00:28 - mmengine - INFO - Epoch(train)   [1][5/6]  lr: 2.5864e-05  eta: 0:33:16  time: 3.3561  data_time: 2.9012  memory: 1614  loss: 2.7217  loss_cls: 2.0250  loss_bbox: 0.6968
2023/06/11 15:00:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:30 - mmengine - INFO - Epoch(train)   [2][5/6]  lr: 6.4656e-05  eta: 0:16:27  time: 1.6758  data_time: 1.4020  memory: 1614  loss: 2.7893  loss_cls: 2.1221  loss_bbox: 0.6672
2023/06/11 15:00:30 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:31 - mmengine - INFO - Epoch(train)   [3][5/6]  lr: 1.0345e-04  eta: 0:11:23  time: 1.1730  data_time: 0.9602  memory: 1614  loss: 2.8061  loss_cls: 2.1511  loss_bbox: 0.6550
2023/06/11 15:00:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:32 - mmengine - INFO - Epoch(train)   [4][5/6]  lr: 1.4224e-04  eta: 0:08:51  time: 0.9218  data_time: 0.7389  memory: 1614  loss: 2.8109  loss_cls: 2.1621  loss_bbox: 0.6488
2023/06/11 15:00:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:34 - mmengine - INFO - Epoch(train)   [5][5/6]  lr: 1.8103e-04  eta: 0:07:26  time: 0.7823  data_time: 0.6156  memory: 1614  loss: 2.8011  loss_cls: 2.1539  loss_bbox: 0.6472
2023/06/11 15:00:34 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:35 - mmengine - INFO - Epoch(train)   [6][5/6]  lr: 1.8750e-04  eta: 0:06:28  time: 0.6873  data_time: 0.5317  memory: 1614  loss: 2.8023  loss_cls: 2.1660  loss_bbox: 0.6364
2023/06/11 15:00:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:37 - mmengine - INFO - Epoch(train)   [7][5/6]  lr: 1.8750e-04  eta: 0:05:47  time: 0.6213  data_time: 0.4728  memory: 1614  loss: 2.7940  loss_cls: 2.1659  loss_bbox: 0.6281
2023/06/11 15:00:37 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:38 - mmengine - INFO - Epoch(train)   [8][5/6]  lr: 1.8750e-04  eta: 0:05:16  time: 0.5715  data_time: 0.4286  memory: 1614  loss: 2.7842  loss_cls: 2.1717  loss_bbox: 0.6125
2023/06/11 15:00:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:39 - mmengine - INFO - Epoch(train)   [9][5/6]  lr: 1.8750e-04  eta: 0:04:50  time: 0.2320  data_time: 0.1267  memory: 1614  loss: 2.7592  loss_cls: 2.1748  loss_bbox: 0.5844
2023/06/11 15:00:39 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:41 - mmengine - INFO - Epoch(train)  [10][5/6]  lr: 1.8750e-04  eta: 0:04:31  time: 0.2313  data_time: 0.1281  memory: 1614  loss: 2.6756  loss_cls: 2.1178  loss_bbox: 0.5578
2023/06/11 15:00:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:41 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/11 15:00:48 - mmengine - INFO - Epoch(val)  [10][ 5/13]    eta: 0:00:10  time: 1.3382  data_time: 1.3185  memory: 305  
2023/06/11 15:00:49 - mmengine - INFO - Epoch(val)  [10][10/13]    eta: 0:00:02  time: 0.6787  data_time: 0.6608  memory: 205  
2023/06/11 15:00:49 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:00:49 - mmengine - INFO - bbox_mAP_copypaste: 0.409 0.558 0.460 0.000 0.075 0.528
2023/06/11 15:00:49 - mmengine - INFO - Epoch(val) [10][13/13]  coco/bbox_mAP: 0.4090  coco/bbox_mAP_50: 0.5580  coco/bbox_mAP_75: 0.4600  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0750  coco/bbox_mAP_l: 0.5280  data_time: 0.5084  time: 0.5263
2023/06/11 15:00:50 - mmengine - INFO - The best checkpoint with 0.4090 coco/bbox_mAP at 10 epoch is saved to best_coco/bbox_mAP_epoch_10.pth.
2023/06/11 15:00:52 - mmengine - INFO - Epoch(train)  [11][5/6]  lr: 1.8750e-04  eta: 0:04:17  time: 0.2355  data_time: 0.1312  memory: 1614  loss: 2.5672  loss_cls: 2.0314  loss_bbox: 0.5357
2023/06/11 15:00:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:53 - mmengine - INFO - Epoch(train)  [12][5/6]  lr: 1.8750e-04  eta: 0:04:05  time: 0.2410  data_time: 0.1351  memory: 1614  loss: 2.4020  loss_cls: 1.9023  loss_bbox: 0.4997
2023/06/11 15:00:53 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:55 - mmengine - INFO - Epoch(train)  [13][5/6]  lr: 1.8750e-04  eta: 0:03:54  time: 0.2459  data_time: 0.1377  memory: 1614  loss: 2.2444  loss_cls: 1.7666  loss_bbox: 0.4778
2023/06/11 15:00:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:56 - mmengine - INFO - Epoch(train)  [14][5/6]  lr: 1.8750e-04  eta: 0:03:45  time: 0.2512  data_time: 0.1417  memory: 1614  loss: 2.0805  loss_cls: 1.6269  loss_bbox: 0.4536
2023/06/11 15:00:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:58 - mmengine - INFO - Epoch(train)  [15][5/6]  lr: 1.8750e-04  eta: 0:03:36  time: 0.2489  data_time: 0.1395  memory: 1614  loss: 1.8705  loss_cls: 1.4458  loss_bbox: 0.4247
2023/06/11 15:00:58 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:00:59 - mmengine - INFO - Epoch(train)  [16][5/6]  lr: 1.8750e-04  eta: 0:03:27  time: 0.2520  data_time: 0.1421  memory: 1614  loss: 1.7339  loss_cls: 1.3218  loss_bbox: 0.4121
2023/06/11 15:00:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:01 - mmengine - INFO - Epoch(train)  [17][5/6]  lr: 1.8750e-04  eta: 0:03:21  time: 0.2576  data_time: 0.1479  memory: 1614  loss: 1.5460  loss_cls: 1.1449  loss_bbox: 0.4012
2023/06/11 15:01:01 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:02 - mmengine - INFO - Epoch(train)  [18][5/6]  lr: 1.8750e-04  eta: 0:03:13  time: 0.2580  data_time: 0.1463  memory: 1614  loss: 1.3978  loss_cls: 1.0113  loss_bbox: 0.3865
2023/06/11 15:01:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:04 - mmengine - INFO - Epoch(train)  [19][5/6]  lr: 1.8750e-04  eta: 0:03:07  time: 0.2567  data_time: 0.1454  memory: 1614  loss: 1.2492  loss_cls: 0.8766  loss_bbox: 0.3726
2023/06/11 15:01:04 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:05 - mmengine - INFO - Epoch(train)  [20][5/6]  lr: 1.8750e-04  eta: 0:03:02  time: 0.2535  data_time: 0.1425  memory: 1614  loss: 1.1887  loss_cls: 0.8224  loss_bbox: 0.3663
2023/06/11 15:01:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:05 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/11 15:01:06 - mmengine - INFO - Epoch(val)  [20][ 5/13]    eta: 0:00:00  time: 0.3852  data_time: 0.3691  memory: 305  
2023/06/11 15:01:06 - mmengine - INFO - Epoch(val)  [20][10/13]    eta: 0:00:00  time: 0.3042  data_time: 0.2891  memory: 205  
2023/06/11 15:01:07 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:01:07 - mmengine - INFO - bbox_mAP_copypaste: 0.666 0.837 0.784 0.000 0.414 0.779
2023/06/11 15:01:07 - mmengine - INFO - Epoch(val) [20][13/13]  coco/bbox_mAP: 0.6660  coco/bbox_mAP_50: 0.8370  coco/bbox_mAP_75: 0.7840  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4140  coco/bbox_mAP_l: 0.7790  data_time: 0.2558  time: 0.2705
2023/06/11 15:01:07 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_10.pth is removed
2023/06/11 15:01:08 - mmengine - INFO - The best checkpoint with 0.6660 coco/bbox_mAP at 20 epoch is saved to best_coco/bbox_mAP_epoch_20.pth.
2023/06/11 15:01:09 - mmengine - INFO - Epoch(train)  [21][5/6]  lr: 1.8750e-04  eta: 0:02:57  time: 0.2483  data_time: 0.1373  memory: 1614  loss: 1.1274  loss_cls: 0.7693  loss_bbox: 0.3581
2023/06/11 15:01:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:10 - mmengine - INFO - Epoch(train)  [22][5/6]  lr: 1.8750e-04  eta: 0:02:52  time: 0.2452  data_time: 0.1357  memory: 1614  loss: 1.0749  loss_cls: 0.7285  loss_bbox: 0.3465
2023/06/11 15:01:10 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:12 - mmengine - INFO - Epoch(train)  [23][5/6]  lr: 1.8750e-04  eta: 0:02:47  time: 0.2445  data_time: 0.1360  memory: 1614  loss: 1.0299  loss_cls: 0.6943  loss_bbox: 0.3357
2023/06/11 15:01:12 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:13 - mmengine - INFO - Epoch(train)  [24][5/6]  lr: 1.8750e-04  eta: 0:02:43  time: 0.2463  data_time: 0.1383  memory: 1614  loss: 0.9507  loss_cls: 0.6305  loss_bbox: 0.3202
2023/06/11 15:01:13 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:15 - mmengine - INFO - Epoch(train)  [25][5/6]  lr: 1.8750e-04  eta: 0:02:39  time: 0.2441  data_time: 0.1367  memory: 1614  loss: 0.9717  loss_cls: 0.6554  loss_bbox: 0.3163
2023/06/11 15:01:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:16 - mmengine - INFO - Epoch(train)  [26][5/6]  lr: 1.8750e-04  eta: 0:02:35  time: 0.2448  data_time: 0.1391  memory: 1614  loss: 0.9431  loss_cls: 0.6333  loss_bbox: 0.3097
2023/06/11 15:01:16 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:18 - mmengine - INFO - Epoch(train)  [27][5/6]  lr: 1.8750e-04  eta: 0:02:31  time: 0.2471  data_time: 0.1431  memory: 1614  loss: 0.9168  loss_cls: 0.6135  loss_bbox: 0.3033
2023/06/11 15:01:18 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:19 - mmengine - INFO - Epoch(train)  [28][5/6]  lr: 1.8750e-04  eta: 0:02:27  time: 0.2453  data_time: 0.1431  memory: 1614  loss: 0.9040  loss_cls: 0.6021  loss_bbox: 0.3019
2023/06/11 15:01:19 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:21 - mmengine - INFO - Epoch(train)  [29][5/6]  lr: 1.8750e-04  eta: 0:02:23  time: 0.2399  data_time: 0.1404  memory: 1614  loss: 0.8776  loss_cls: 0.5872  loss_bbox: 0.2904
2023/06/11 15:01:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:22 - mmengine - INFO - Epoch(train)  [30][5/6]  lr: 1.8750e-04  eta: 0:02:20  time: 0.2396  data_time: 0.1398  memory: 1614  loss: 0.8383  loss_cls: 0.5546  loss_bbox: 0.2836
2023/06/11 15:01:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:22 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/11 15:01:23 - mmengine - INFO - Epoch(val)  [30][ 5/13]    eta: 0:00:00  time: 0.2296  data_time: 0.2156  memory: 305  
2023/06/11 15:01:23 - mmengine - INFO - Epoch(val)  [30][10/13]    eta: 0:00:00  time: 0.1994  data_time: 0.1857  memory: 205  
2023/06/11 15:01:23 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:01:23 - mmengine - INFO - bbox_mAP_copypaste: 0.724 0.848 0.813 0.000 0.430 0.842
2023/06/11 15:01:23 - mmengine - INFO - Epoch(val) [30][13/13]  coco/bbox_mAP: 0.7240  coco/bbox_mAP_50: 0.8480  coco/bbox_mAP_75: 0.8130  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4300  coco/bbox_mAP_l: 0.8420  data_time: 0.1714  time: 0.1854
2023/06/11 15:01:23 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_20.pth is removed
2023/06/11 15:01:24 - mmengine - INFO - The best checkpoint with 0.7240 coco/bbox_mAP at 30 epoch is saved to best_coco/bbox_mAP_epoch_30.pth.
2023/06/11 15:01:26 - mmengine - INFO - Epoch(train)  [31][5/6]  lr: 1.8750e-04  eta: 0:02:17  time: 0.2393  data_time: 0.1360  memory: 1614  loss: 0.8130  loss_cls: 0.5350  loss_bbox: 0.2780
2023/06/11 15:01:26 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:27 - mmengine - INFO - Epoch(train)  [32][5/6]  lr: 1.8750e-04  eta: 0:02:13  time: 0.2383  data_time: 0.1344  memory: 1614  loss: 0.7934  loss_cls: 0.5200  loss_bbox: 0.2733
2023/06/11 15:01:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:28 - mmengine - INFO - Epoch(train)  [33][5/6]  lr: 1.8750e-04  eta: 0:02:10  time: 0.2347  data_time: 0.1299  memory: 1614  loss: 0.7164  loss_cls: 0.4510  loss_bbox: 0.2654
2023/06/11 15:01:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:30 - mmengine - INFO - Epoch(train)  [34][5/6]  lr: 1.8750e-04  eta: 0:02:07  time: 0.2357  data_time: 0.1296  memory: 1614  loss: 0.7237  loss_cls: 0.4561  loss_bbox: 0.2676
2023/06/11 15:01:30 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:31 - mmengine - INFO - Epoch(train)  [35][5/6]  lr: 1.8750e-04  eta: 0:02:04  time: 0.2334  data_time: 0.1276  memory: 1614  loss: 0.7091  loss_cls: 0.4485  loss_bbox: 0.2606
2023/06/11 15:01:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:33 - mmengine - INFO - Epoch(train)  [36][5/6]  lr: 1.8750e-04  eta: 0:02:02  time: 0.2336  data_time: 0.1271  memory: 1614  loss: 0.7000  loss_cls: 0.4491  loss_bbox: 0.2509
2023/06/11 15:01:33 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:34 - mmengine - INFO - Epoch(train)  [37][5/6]  lr: 1.8750e-04  eta: 0:01:59  time: 0.2329  data_time: 0.1249  memory: 1614  loss: 0.6899  loss_cls: 0.4408  loss_bbox: 0.2492
2023/06/11 15:01:34 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:35 - mmengine - INFO - Epoch(train)  [38][5/6]  lr: 1.8750e-04  eta: 0:01:56  time: 0.2326  data_time: 0.1249  memory: 1614  loss: 0.6964  loss_cls: 0.4448  loss_bbox: 0.2517
2023/06/11 15:01:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:37 - mmengine - INFO - Epoch(train)  [39][5/6]  lr: 1.8750e-04  eta: 0:01:54  time: 0.2317  data_time: 0.1269  memory: 1614  loss: 0.7016  loss_cls: 0.4471  loss_bbox: 0.2545
2023/06/11 15:01:37 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:38 - mmengine - INFO - Epoch(train)  [40][5/6]  lr: 1.8750e-04  eta: 0:01:51  time: 0.2335  data_time: 0.1302  memory: 1614  loss: 0.7000  loss_cls: 0.4512  loss_bbox: 0.2488
2023/06/11 15:01:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:38 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/11 15:01:39 - mmengine - INFO - Epoch(val)  [40][ 5/13]    eta: 0:00:00  time: 0.1662  data_time: 0.1530  memory: 305  
2023/06/11 15:01:39 - mmengine - INFO - Epoch(val)  [40][10/13]    eta: 0:00:00  time: 0.1503  data_time: 0.1375  memory: 205  
2023/06/11 15:01:39 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:01:40 - mmengine - INFO - bbox_mAP_copypaste: 0.732 0.846 0.804 0.000 0.447 0.853
2023/06/11 15:01:40 - mmengine - INFO - Epoch(val) [40][13/13]  coco/bbox_mAP: 0.7320  coco/bbox_mAP_50: 0.8460  coco/bbox_mAP_75: 0.8040  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4470  coco/bbox_mAP_l: 0.8530  data_time: 0.0029  time: 0.0146
2023/06/11 15:01:40 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_30.pth is removed
2023/06/11 15:01:40 - mmengine - INFO - The best checkpoint with 0.7320 coco/bbox_mAP at 40 epoch is saved to best_coco/bbox_mAP_epoch_40.pth.
2023/06/11 15:01:42 - mmengine - INFO - Epoch(train)  [41][5/6]  lr: 1.8750e-04  eta: 0:01:48  time: 0.2317  data_time: 0.1269  memory: 1614  loss: 0.6894  loss_cls: 0.4437  loss_bbox: 0.2456
2023/06/11 15:01:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:43 - mmengine - INFO - Epoch(train)  [42][5/6]  lr: 1.8750e-04  eta: 0:01:46  time: 0.2264  data_time: 0.1231  memory: 1614  loss: 0.6745  loss_cls: 0.4284  loss_bbox: 0.2461
2023/06/11 15:01:43 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:45 - mmengine - INFO - Epoch(train)  [43][5/6]  lr: 1.8750e-04  eta: 0:01:44  time: 0.2333  data_time: 0.1293  memory: 1614  loss: 0.6697  loss_cls: 0.4241  loss_bbox: 0.2456
2023/06/11 15:01:45 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:46 - mmengine - INFO - Epoch(train)  [44][5/6]  lr: 1.8750e-04  eta: 0:01:41  time: 0.2289  data_time: 0.1250  memory: 1614  loss: 0.6569  loss_cls: 0.4102  loss_bbox: 0.2468
2023/06/11 15:01:46 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:47 - mmengine - INFO - Epoch(train)  [45][5/6]  lr: 1.8750e-04  eta: 0:01:39  time: 0.2268  data_time: 0.1247  memory: 1614  loss: 0.6401  loss_cls: 0.3993  loss_bbox: 0.2408
2023/06/11 15:01:47 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:49 - mmengine - INFO - Epoch(train)  [46][5/6]  lr: 1.8750e-04  eta: 0:01:36  time: 0.2267  data_time: 0.1253  memory: 1614  loss: 0.6252  loss_cls: 0.3887  loss_bbox: 0.2365
2023/06/11 15:01:49 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:50 - mmengine - INFO - Epoch(train)  [47][5/6]  lr: 1.8750e-04  eta: 0:01:34  time: 0.2266  data_time: 0.1232  memory: 1614  loss: 0.6092  loss_cls: 0.3796  loss_bbox: 0.2296
2023/06/11 15:01:50 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:51 - mmengine - INFO - Epoch(train)  [48][5/6]  lr: 1.8750e-04  eta: 0:01:32  time: 0.2288  data_time: 0.1241  memory: 1614  loss: 0.6016  loss_cls: 0.3692  loss_bbox: 0.2324
2023/06/11 15:01:51 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:53 - mmengine - INFO - Epoch(train)  [49][5/6]  lr: 1.8750e-04  eta: 0:01:30  time: 0.2287  data_time: 0.1249  memory: 1614  loss: 0.6010  loss_cls: 0.3683  loss_bbox: 0.2327
2023/06/11 15:01:53 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:54 - mmengine - INFO - Epoch(train)  [50][5/6]  lr: 1.8750e-04  eta: 0:01:28  time: 0.2313  data_time: 0.1275  memory: 1614  loss: 0.5954  loss_cls: 0.3671  loss_bbox: 0.2283
2023/06/11 15:01:54 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:54 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/11 15:01:55 - mmengine - INFO - Epoch(val)  [50][ 5/13]    eta: 0:00:00  time: 0.0145  data_time: 0.0033  memory: 305  
2023/06/11 15:01:55 - mmengine - INFO - Epoch(val)  [50][10/13]    eta: 0:00:00  time: 0.0141  data_time: 0.0033  memory: 205  
2023/06/11 15:01:55 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:01:55 - mmengine - INFO - bbox_mAP_copypaste: 0.750 0.853 0.830 0.000 0.476 0.867
2023/06/11 15:01:55 - mmengine - INFO - Epoch(val) [50][13/13]  coco/bbox_mAP: 0.7500  coco/bbox_mAP_50: 0.8530  coco/bbox_mAP_75: 0.8300  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4760  coco/bbox_mAP_l: 0.8670  data_time: 0.0029  time: 0.0136
2023/06/11 15:01:55 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_40.pth is removed
2023/06/11 15:01:56 - mmengine - INFO - The best checkpoint with 0.7500 coco/bbox_mAP at 50 epoch is saved to best_coco/bbox_mAP_epoch_50.pth.
2023/06/11 15:01:58 - mmengine - INFO - Epoch(train)  [51][5/6]  lr: 1.8742e-04  eta: 0:01:26  time: 0.2279  data_time: 0.1221  memory: 1614  loss: 0.5988  loss_cls: 0.3687  loss_bbox: 0.2301
2023/06/11 15:01:58 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:01:59 - mmengine - INFO - Epoch(train)  [52][5/6]  lr: 1.8701e-04  eta: 0:01:23  time: 0.2264  data_time: 0.1204  memory: 1614  loss: 0.5787  loss_cls: 0.3542  loss_bbox: 0.2245
2023/06/11 15:01:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:00 - mmengine - INFO - Epoch(train)  [53][5/6]  lr: 1.8625e-04  eta: 0:01:21  time: 0.2257  data_time: 0.1190  memory: 1614  loss: 0.5800  loss_cls: 0.3546  loss_bbox: 0.2254
2023/06/11 15:02:00 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:02 - mmengine - INFO - Epoch(train)  [54][5/6]  lr: 1.8515e-04  eta: 0:01:19  time: 0.2283  data_time: 0.1224  memory: 1614  loss: 0.5827  loss_cls: 0.3576  loss_bbox: 0.2250
2023/06/11 15:02:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:03 - mmengine - INFO - Epoch(train)  [55][5/6]  lr: 1.8370e-04  eta: 0:01:17  time: 0.2257  data_time: 0.1224  memory: 1614  loss: 0.5774  loss_cls: 0.3551  loss_bbox: 0.2224
2023/06/11 15:02:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:04 - mmengine - INFO - Epoch(train)  [56][5/6]  lr: 1.8191e-04  eta: 0:01:15  time: 0.2257  data_time: 0.1216  memory: 1614  loss: 0.5674  loss_cls: 0.3489  loss_bbox: 0.2184
2023/06/11 15:02:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:06 - mmengine - INFO - Epoch(train)  [57][5/6]  lr: 1.7980e-04  eta: 0:01:13  time: 0.2271  data_time: 0.1236  memory: 1614  loss: 0.5686  loss_cls: 0.3487  loss_bbox: 0.2199
2023/06/11 15:02:06 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:07 - mmengine - INFO - Epoch(train)  [58][5/6]  lr: 1.7737e-04  eta: 0:01:11  time: 0.2258  data_time: 0.1231  memory: 1614  loss: 0.5689  loss_cls: 0.3520  loss_bbox: 0.2170
2023/06/11 15:02:07 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:09 - mmengine - INFO - Epoch(train)  [59][5/6]  lr: 1.7462e-04  eta: 0:01:09  time: 0.2236  data_time: 0.1226  memory: 1614  loss: 0.5724  loss_cls: 0.3590  loss_bbox: 0.2134
2023/06/11 15:02:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:10 - mmengine - INFO - Epoch(train)  [60][5/6]  lr: 1.7157e-04  eta: 0:01:07  time: 0.2226  data_time: 0.1222  memory: 1614  loss: 0.5832  loss_cls: 0.3664  loss_bbox: 0.2169
2023/06/11 15:02:10 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:10 - mmengine - INFO - Saving checkpoint at 60 epochs
2023/06/11 15:02:11 - mmengine - INFO - Epoch(val)  [60][ 5/13]    eta: 0:00:00  time: 0.0140  data_time: 0.0033  memory: 305  
2023/06/11 15:02:11 - mmengine - INFO - Epoch(val)  [60][10/13]    eta: 0:00:00  time: 0.0135  data_time: 0.0032  memory: 205  
2023/06/11 15:02:11 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:02:11 - mmengine - INFO - bbox_mAP_copypaste: 0.752 0.862 0.849 0.000 0.448 0.887
2023/06/11 15:02:11 - mmengine - INFO - Epoch(val) [60][13/13]  coco/bbox_mAP: 0.7520  coco/bbox_mAP_50: 0.8620  coco/bbox_mAP_75: 0.8490  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4480  coco/bbox_mAP_l: 0.8870  data_time: 0.0029  time: 0.0133
2023/06/11 15:02:11 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_50.pth is removed
2023/06/11 15:02:12 - mmengine - INFO - The best checkpoint with 0.7520 coco/bbox_mAP at 60 epoch is saved to best_coco/bbox_mAP_epoch_60.pth.
2023/06/11 15:02:13 - mmengine - INFO - Epoch(train)  [61][5/6]  lr: 1.6824e-04  eta: 0:01:06  time: 0.2270  data_time: 0.1249  memory: 1614  loss: 0.6023  loss_cls: 0.3812  loss_bbox: 0.2211
2023/06/11 15:02:14 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:15 - mmengine - INFO - Epoch(train)  [62][5/6]  lr: 1.6462e-04  eta: 0:01:04  time: 0.2317  data_time: 0.1279  memory: 1614  loss: 0.6065  loss_cls: 0.3844  loss_bbox: 0.2222
2023/06/11 15:02:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:17 - mmengine - INFO - Epoch(train)  [63][5/6]  lr: 1.6075e-04  eta: 0:01:02  time: 0.2330  data_time: 0.1288  memory: 1614  loss: 0.6240  loss_cls: 0.3940  loss_bbox: 0.2300
2023/06/11 15:02:17 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:18 - mmengine - INFO - Epoch(train)  [64][5/6]  lr: 1.5663e-04  eta: 0:01:00  time: 0.2358  data_time: 0.1318  memory: 1614  loss: 0.6308  loss_cls: 0.3984  loss_bbox: 0.2325
2023/06/11 15:02:18 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:20 - mmengine - INFO - Epoch(train)  [65][5/6]  lr: 1.5228e-04  eta: 0:00:58  time: 0.2377  data_time: 0.1339  memory: 1614  loss: 0.6375  loss_cls: 0.4045  loss_bbox: 0.2330
2023/06/11 15:02:20 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:21 - mmengine - INFO - Epoch(train)  [66][5/6]  lr: 1.4772e-04  eta: 0:00:57  time: 0.2345  data_time: 0.1300  memory: 1614  loss: 0.6215  loss_cls: 0.3917  loss_bbox: 0.2298
2023/06/11 15:02:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:22 - mmengine - INFO - Epoch(train)  [67][5/6]  lr: 1.4297e-04  eta: 0:00:55  time: 0.2370  data_time: 0.1323  memory: 1614  loss: 0.6182  loss_cls: 0.3846  loss_bbox: 0.2336
2023/06/11 15:02:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:24 - mmengine - INFO - Epoch(train)  [68][5/6]  lr: 1.3804e-04  eta: 0:00:53  time: 0.2394  data_time: 0.1361  memory: 1614  loss: 0.6012  loss_cls: 0.3738  loss_bbox: 0.2275
2023/06/11 15:02:24 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:25 - mmengine - INFO - Epoch(train)  [69][5/6]  lr: 1.3295e-04  eta: 0:00:51  time: 0.2390  data_time: 0.1364  memory: 1614  loss: 0.5779  loss_cls: 0.3532  loss_bbox: 0.2248
2023/06/11 15:02:25 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:26 - mmengine - INFO - Epoch(train)  [70][5/6]  lr: 1.2773e-04  eta: 0:00:49  time: 0.2379  data_time: 0.1364  memory: 1614  loss: 0.5668  loss_cls: 0.3454  loss_bbox: 0.2214
2023/06/11 15:02:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:27 - mmengine - INFO - Saving checkpoint at 70 epochs
2023/06/11 15:02:28 - mmengine - INFO - Epoch(val)  [70][ 5/13]    eta: 0:00:00  time: 0.0136  data_time: 0.0035  memory: 305  
2023/06/11 15:02:28 - mmengine - INFO - Epoch(val)  [70][10/13]    eta: 0:00:00  time: 0.0132  data_time: 0.0035  memory: 205  
2023/06/11 15:02:28 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:02:28 - mmengine - INFO - bbox_mAP_copypaste: 0.765 0.863 0.854 0.000 0.479 0.896
2023/06/11 15:02:28 - mmengine - INFO - Epoch(val) [70][13/13]  coco/bbox_mAP: 0.7650  coco/bbox_mAP_50: 0.8630  coco/bbox_mAP_75: 0.8540  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4790  coco/bbox_mAP_l: 0.8960  data_time: 0.0028  time: 0.0129
2023/06/11 15:02:28 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_60.pth is removed
2023/06/11 15:02:29 - mmengine - INFO - The best checkpoint with 0.7650 coco/bbox_mAP at 70 epoch is saved to best_coco/bbox_mAP_epoch_70.pth.
2023/06/11 15:02:30 - mmengine - INFO - Epoch(train)  [71][5/6]  lr: 1.2239e-04  eta: 0:00:48  time: 0.2398  data_time: 0.1361  memory: 1614  loss: 0.5801  loss_cls: 0.3580  loss_bbox: 0.2222
2023/06/11 15:02:30 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:32 - mmengine - INFO - Epoch(train)  [72][5/6]  lr: 1.1695e-04  eta: 0:00:46  time: 0.2368  data_time: 0.1331  memory: 1614  loss: 0.5704  loss_cls: 0.3508  loss_bbox: 0.2196
2023/06/11 15:02:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:33 - mmengine - INFO - Epoch(train)  [73][5/6]  lr: 1.1145e-04  eta: 0:00:44  time: 0.2359  data_time: 0.1315  memory: 1614  loss: 0.5613  loss_cls: 0.3435  loss_bbox: 0.2178
2023/06/11 15:02:33 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:35 - mmengine - INFO - Epoch(train)  [74][5/6]  lr: 1.0589e-04  eta: 0:00:43  time: 0.2388  data_time: 0.1340  memory: 1614  loss: 0.5723  loss_cls: 0.3508  loss_bbox: 0.2215
2023/06/11 15:02:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:36 - mmengine - INFO - Epoch(train)  [75][5/6]  lr: 1.0030e-04  eta: 0:00:41  time: 0.2430  data_time: 0.1379  memory: 1614  loss: 0.5639  loss_cls: 0.3441  loss_bbox: 0.2198
2023/06/11 15:02:36 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:38 - mmengine - INFO - Epoch(train)  [76][5/6]  lr: 9.4708e-05  eta: 0:00:39  time: 0.2419  data_time: 0.1366  memory: 1614  loss: 0.5652  loss_cls: 0.3429  loss_bbox: 0.2224
2023/06/11 15:02:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:39 - mmengine - INFO - Epoch(train)  [77][5/6]  lr: 8.9128e-05  eta: 0:00:37  time: 0.2416  data_time: 0.1371  memory: 1614  loss: 0.5898  loss_cls: 0.3622  loss_bbox: 0.2276
2023/06/11 15:02:39 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:40 - mmengine - INFO - Epoch(train)  [78][5/6]  lr: 8.3585e-05  eta: 0:00:36  time: 0.2379  data_time: 0.1344  memory: 1614  loss: 0.5956  loss_cls: 0.3704  loss_bbox: 0.2253
2023/06/11 15:02:40 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:42 - mmengine - INFO - Epoch(train)  [79][5/6]  lr: 7.8100e-05  eta: 0:00:34  time: 0.2341  data_time: 0.1320  memory: 1614  loss: 0.5747  loss_cls: 0.3552  loss_bbox: 0.2195
2023/06/11 15:02:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:43 - mmengine - INFO - Epoch(train)  [80][5/6]  lr: 7.2696e-05  eta: 0:00:32  time: 0.2366  data_time: 0.1343  memory: 1614  loss: 0.5975  loss_cls: 0.3755  loss_bbox: 0.2220
2023/06/11 15:02:43 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:43 - mmengine - INFO - Saving checkpoint at 80 epochs
2023/06/11 15:02:44 - mmengine - INFO - Epoch(val)  [80][ 5/13]    eta: 0:00:00  time: 0.0134  data_time: 0.0032  memory: 305  
2023/06/11 15:02:44 - mmengine - INFO - Epoch(val)  [80][10/13]    eta: 0:00:00  time: 0.0136  data_time: 0.0032  memory: 205  
2023/06/11 15:02:44 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:02:44 - mmengine - INFO - bbox_mAP_copypaste: 0.771 0.873 0.863 0.000 0.472 0.904
2023/06/11 15:02:44 - mmengine - INFO - Epoch(val) [80][13/13]  coco/bbox_mAP: 0.7710  coco/bbox_mAP_50: 0.8730  coco/bbox_mAP_75: 0.8630  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4720  coco/bbox_mAP_l: 0.9040  data_time: 0.0027  time: 0.0136
2023/06/11 15:02:44 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_70.pth is removed
2023/06/11 15:02:45 - mmengine - INFO - The best checkpoint with 0.7710 coco/bbox_mAP at 80 epoch is saved to best_coco/bbox_mAP_epoch_80.pth.
2023/06/11 15:02:47 - mmengine - INFO - Epoch(train)  [81][5/6]  lr: 6.7393e-05  eta: 0:00:31  time: 0.2406  data_time: 0.1367  memory: 1614  loss: 0.6011  loss_cls: 0.3788  loss_bbox: 0.2222
2023/06/11 15:02:47 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:48 - mmengine - INFO - Epoch(train)  [82][5/6]  lr: 6.2213e-05  eta: 0:00:29  time: 0.2418  data_time: 0.1371  memory: 1614  loss: 0.6029  loss_cls: 0.3794  loss_bbox: 0.2236
2023/06/11 15:02:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:50 - mmengine - INFO - Epoch(train)  [83][5/6]  lr: 5.7175e-05  eta: 0:00:27  time: 0.2419  data_time: 0.1375  memory: 1614  loss: 0.6048  loss_cls: 0.3817  loss_bbox: 0.2232
2023/06/11 15:02:50 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:51 - mmengine - INFO - Epoch(train)  [84][5/6]  lr: 5.2301e-05  eta: 0:00:26  time: 0.2420  data_time: 0.1371  memory: 1614  loss: 0.6065  loss_cls: 0.3827  loss_bbox: 0.2239
2023/06/11 15:02:51 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:53 - mmengine - INFO - Epoch(train)  [85][5/6]  lr: 4.7608e-05  eta: 0:00:24  time: 0.2427  data_time: 0.1370  memory: 1614  loss: 0.5924  loss_cls: 0.3750  loss_bbox: 0.2174
2023/06/11 15:02:53 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:54 - mmengine - INFO - Epoch(train)  [86][5/6]  lr: 4.3117e-05  eta: 0:00:22  time: 0.2436  data_time: 0.1378  memory: 1614  loss: 0.5862  loss_cls: 0.3694  loss_bbox: 0.2168
2023/06/11 15:02:54 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:56 - mmengine - INFO - Epoch(train)  [87][5/6]  lr: 3.8843e-05  eta: 0:00:21  time: 0.2433  data_time: 0.1376  memory: 1614  loss: 0.5818  loss_cls: 0.3671  loss_bbox: 0.2146
2023/06/11 15:02:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:57 - mmengine - INFO - Epoch(train)  [88][5/6]  lr: 3.4805e-05  eta: 0:00:19  time: 0.2452  data_time: 0.1389  memory: 1614  loss: 0.5699  loss_cls: 0.3549  loss_bbox: 0.2151
2023/06/11 15:02:57 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:02:58 - mmengine - INFO - Epoch(train)  [89][5/6]  lr: 3.1018e-05  eta: 0:00:18  time: 0.2385  data_time: 0.1326  memory: 1614  loss: 0.5502  loss_cls: 0.3402  loss_bbox: 0.2101
2023/06/11 15:02:58 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:00 - mmengine - INFO - Epoch(train)  [90][5/6]  lr: 2.7497e-05  eta: 0:00:16  time: 0.2371  data_time: 0.1308  memory: 1614  loss: 0.7657  loss_cls: 0.5621  loss_bbox: 0.2036
2023/06/11 15:03:00 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:00 - mmengine - INFO - Saving checkpoint at 90 epochs
2023/06/11 15:03:01 - mmengine - INFO - Epoch(val)  [90][ 5/13]    eta: 0:00:00  time: 0.0139  data_time: 0.0028  memory: 305  
2023/06/11 15:03:01 - mmengine - INFO - Epoch(val)  [90][10/13]    eta: 0:00:00  time: 0.0136  data_time: 0.0028  memory: 205  
2023/06/11 15:03:01 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:03:01 - mmengine - INFO - bbox_mAP_copypaste: 0.781 0.876 0.867 0.000 0.483 0.915
2023/06/11 15:03:01 - mmengine - INFO - Epoch(val) [90][13/13]  coco/bbox_mAP: 0.7810  coco/bbox_mAP_50: 0.8760  coco/bbox_mAP_75: 0.8670  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4830  coco/bbox_mAP_l: 0.9150  data_time: 0.0025  time: 0.0133
2023/06/11 15:03:01 - mmengine - INFO - The previous best checkpoint c:\Users\Roger\Desktop\OpenMMLabCourseStudy\8. mmdet气球检测\release\work_dirs\rtmdet_tiny_1xb12-40e_balloon\best_coco/bbox_mAP_epoch_80.pth is removed
2023/06/11 15:03:02 - mmengine - INFO - The best checkpoint with 0.7810 coco/bbox_mAP at 90 epoch is saved to best_coco/bbox_mAP_epoch_90.pth.
2023/06/11 15:03:03 - mmengine - INFO - Epoch(train)  [91][5/6]  lr: 2.4255e-05  eta: 0:00:14  time: 0.2384  data_time: 0.1282  memory: 1614  loss: 0.7646  loss_cls: 0.5638  loss_bbox: 0.2008
2023/06/11 15:03:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:05 - mmengine - INFO - Epoch(train)  [92][5/6]  lr: 2.1307e-05  eta: 0:00:13  time: 0.2360  data_time: 0.1272  memory: 1614  loss: 0.7616  loss_cls: 0.5631  loss_bbox: 0.1985
2023/06/11 15:03:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:06 - mmengine - INFO - Epoch(train)  [93][5/6]  lr: 1.8663e-05  eta: 0:00:11  time: 0.2346  data_time: 0.1259  memory: 1614  loss: 0.7775  loss_cls: 0.5736  loss_bbox: 0.2039
2023/06/11 15:03:06 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:08 - mmengine - INFO - Epoch(train)  [94][5/6]  lr: 1.6334e-05  eta: 0:00:09  time: 0.2352  data_time: 0.1275  memory: 1614  loss: 0.7791  loss_cls: 0.5718  loss_bbox: 0.2073
2023/06/11 15:03:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:09 - mmengine - INFO - Epoch(train)  [95][5/6]  lr: 1.4329e-05  eta: 0:00:08  time: 0.2366  data_time: 0.1277  memory: 1614  loss: 0.7742  loss_cls: 0.5640  loss_bbox: 0.2102
2023/06/11 15:03:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:09 - mmengine - INFO - Switch pipeline now!
2023/06/11 15:03:23 - mmengine - INFO - Epoch(train)  [96][5/6]  lr: 1.2656e-05  eta: 0:00:07  time: 0.4796  data_time: 0.3681  memory: 1614  loss: 0.7679  loss_cls: 0.5619  loss_bbox: 0.2060
2023/06/11 15:03:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:23 - mmengine - INFO - Epoch(train)  [97][5/6]  lr: 1.1321e-05  eta: 0:00:05  time: 0.4677  data_time: 0.3586  memory: 1614  loss: 0.7600  loss_cls: 0.5604  loss_bbox: 0.1996
2023/06/11 15:03:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:24 - mmengine - INFO - Epoch(train)  [98][5/6]  lr: 1.0330e-05  eta: 0:00:03  time: 0.4540  data_time: 0.3473  memory: 1614  loss: 0.5252  loss_cls: 0.3266  loss_bbox: 0.1987
2023/06/11 15:03:24 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:25 - mmengine - INFO - Epoch(train)  [99][5/6]  lr: 9.6874e-06  eta: 0:00:01  time: 0.4363  data_time: 0.3361  memory: 1614  loss: 0.5026  loss_cls: 0.3124  loss_bbox: 0.1903
2023/06/11 15:03:25 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:26 - mmengine - INFO - Epoch(train) [100][5/6]  lr: 9.3945e-06  eta: 0:00:00  time: 0.4265  data_time: 0.3271  memory: 1614  loss: 0.4909  loss_cls: 0.3078  loss_bbox: 0.1831
2023/06/11 15:03:26 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230611_150004
2023/06/11 15:03:26 - mmengine - INFO - Saving checkpoint at 100 epochs
2023/06/11 15:03:27 - mmengine - INFO - Epoch(val) [100][ 5/13]    eta: 0:00:00  time: 0.0134  data_time: 0.0028  memory: 305  
2023/06/11 15:03:27 - mmengine - INFO - Epoch(val) [100][10/13]    eta: 0:00:00  time: 0.0135  data_time: 0.0028  memory: 205  
2023/06/11 15:03:27 - mmengine - INFO - Evaluating bbox...
2023/06/11 15:03:27 - mmengine - INFO - bbox_mAP_copypaste: 0.763 0.865 0.843 0.000 0.450 0.897
2023/06/11 15:03:27 - mmengine - INFO - Epoch(val) [100][13/13]  coco/bbox_mAP: 0.7630  coco/bbox_mAP_50: 0.8650  coco/bbox_mAP_75: 0.8430  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4500  coco/bbox_mAP_l: 0.8970  data_time: 0.0022  time: 0.0131
